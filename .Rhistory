install.packages("ggplot2")
library(ggplot2)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
nba$Name <- with(nba, reorder(Name, PTS))
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
(p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white",
+     high = "steelblue"))
library(ggplot2)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
nba$Name <- with(nba, reorder(Name, PTS))
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
(p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white", high = "steelblue"))
library(ggplot2)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
nba$Name <- with(nba, reorder(Name, PTS))
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
library(ggplot2)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
nba$Name <- with(nba, reorder(Name, PTS))
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
library(ggplot2)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
nba$Name <- with(nba, reorder(Name, PTS))
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),
+     colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),( colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
nba.m <- ddply(nba.m, .(variable), transform,
+     rescale = rescale(value))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),( colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
nba.m <- ddply(nba.m, .(variable), transform,    rescale = rescale(value))
p <- ggplot(nba.m, aes(variable, Name)) + geom_tile(aes(fill = rescale),( colour = "white") + scale_fill_gradient(low = "white", high = "steelblue")
nba <- read.csv("ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
library(ggplot2)
library(RColorBrewer)
nba <- read.csv("ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
library(d3heatmap)
library(shiny)
install.packages("d3heatmap")
install.packages("shiny")
library(d3heatmap)
library(shiny)
ui <- fluidPage(
h1("A heatmap demo"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
checkboxInput("cluster", "Apply clustering"),
d3heatmapOutput("heatmap")
)
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
)
})
}
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
h1("A heatmap demo"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
checkboxInput("cluster", "Apply clustering"),
checkboxInput("yarrak", "Yarak var yicen mi?"),
d3heatmapOutput("heatmap")
)
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
)
})
}
shinyApp(ui, server)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
install.packages("shinyjs")
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
install.packages("V8")
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
print(source('Desktop/heatmap-source/nba_heatmap.R')$value)
anova(fm1, fm2)
data = DNase, subset = Run == 1)
coplot(density ~ conc | Run, data = DNase,
summary(fm2)
## End(Not run)
panel = panel.smooth, rows = 1)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/nba_heatmap.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
library(shiny); print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
print(source('Desktop/air_quality.R')$value)
shiny::runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
runApp('Desktop/UMMS/shiny_intro/first_app')
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
ls
pwd
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/census_app')
runApp('Desktop/UMMS/shiny_intro/stockVis')
install.packages("quantmod")
runApp('Desktop/UMMS/shiny_intro/stockVis')
install.packages("tictoc")
runApp('Desktop/UMMS/shiny_intro/stockVis')
install.packages("chron")
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
showReactLog(time = TRUE)
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
runApp('Desktop/UMMS/shiny_intro/stockVis')
shinyApp(ui, server)
install.packages("shinydashboard")
shinydashboard
runApp('Desktop/UMMS/shiny_intro/dashboard_shiny_intro')
dashboardBody()
sidebarMenu(
dashboardSidebar(),
dashboardBody()
)
source('~/Desktop/UMMS/shiny_intro/dashboard_shiny_intro/ui.R')
source('~/Desktop/UMMS/shiny_intro/dashboard_shiny_intro/ui.R')
runApp('Desktop/UMMS/shiny_intro/dashboard_shiny_intro')
runApp('Desktop/UMMS/shiny_intro/dashboard_shiny_intro')
runApp('Desktop/UMMS/shiny_intro/dashboard_shiny_intro')
runApp('Desktop/UMMS/shiny_intro/dashboard_shiny_intro')
dashboardHeader(dropdownMenuOutput("messageMenu")),
runApp('Desktop/UMMS/shiny_intro/dashboard_shiny_intro')
#' startDEBrowser
source("http://bioconductor.org/biocLite.R")
biocLite("iCOBRA")
library(iCOBRA)
data(cobradata_example)
cobraperf <- calculate_performance(cobradata_example, binary_truth = "status",
cont_truth = "logFC",
aspects = c("fdrtpr", "fdrtprcurve",
"corr"))
cobraplot <- prepare_data_for_plot(cobraperf, colorscheme = "Set2",
keepmethods = c("voom", "edgeR"))
plot_fdrtprcurve(cobraplot)
plot_corr(cobraplot, corrtype = "spearman")
#'
browseVignettes("iCOBRA")
COBRAapp()
install.packages("markdown")
COBRAapp()
install.packages("extadata")
#' Starts the DEBrowser to be able to run interactively.
COBRAapp()
COBRAapp()
environment(deServer) <- environment()
source(“http://www.bioconductor.org/biocLite.R”)
source(“http://www.bioconductor.org/biocLite.R”)
source("http://www.bioconductor.org/biocLite.R")
biocLite("debrowser")
library(DEBrowser)
library(debrowser)
startDEBrowser()
lsp <- function(package, all.names = FALSE, pattern)
{
package <- deparse(substitute(package))
ls(
pos = paste("package", package, sep = ":"),
all.names = all.names,
pattern = pattern
)
}
lsp("debrowser")
lsp(debrowser)
ls(debrowser)
ls("debrowser")
ls
get_pwd()
getwd()
setwd("Desktop/UMMS/shiny_intro/")
ls()
list.files
list.files()
ls <- list.files()
ls
setwd("census_app/")
runApp()
